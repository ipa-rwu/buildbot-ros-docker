# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import reporters, util, schedulers
from buildbot.plugins import *

from buildbot.process.properties import Interpolate, Properties
from buildbot_ros_cfg.ros_deb import ros_debbuild
from buildbot_ros_cfg.ros_test import ros_testbuild
from buildbot_ros_cfg.ros_doc import ros_docbuild
from buildbot_ros_cfg.ros_sys import ros_sysbuild

from buildbot_ros_cfg.distro import *
from buildbot_ros_cfg.distro_private import get_private_index
from buildbot_ros_cfg.system_rosinstall import *
from buildbot_ros_cfg.system_list import get_rosinstall_index

from buildbot_ros_cfg.git_pr_poller import GitHubStatusPushV2

from buildbot.schedulers import forcesched, timed
import os

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
BUILDERS = [os.environ.get("BUILDBOT_WORKER_NAME","worker-2")]
buildbotURL = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/")
db_url = os.environ.get("BUILDBOT_DB_URL", "sqlite:///state.sqlite").format(**os.environ)
www_port=os.environ.get("BUILDBOT_WEB_PORT", 8010)

c['workers'] = [worker.Worker(os.environ.get("BUILDBOT_WORKER_NAME","worker-2"), os.environ.get("BUILDBOT_WORKER_PASS","1106"))]
build_lock = util.MasterLock("master_lock", maxCount=2)
locks = [build_lock.access('counting')]
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

c['services'] = []
c['builders'] = []
c['change_source'] = []
c['secretsProviders'] = [secrets.SecretInAFile(dirname="./secret")]
c['services'].append(GitHubStatusPushV2(token=util.Secret("OathToken")))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
#rosindex = get_private_index('git@github.com:ScalABLE40/rosdistro-scalable.git')
rosindex = get_private_index(os.environ.get("BUILDBOT_PRIVATE_INDEX",'git@github.com:ipa-rwu/rosdistro_buildbot.git'))
dist_names = rosindex.distributions.keys()
oracle = RosDistroOracle(rosindex, dist_names)

systemindex = get_rosinstall_index(os.environ.get("BUILDBOT_ROSINSTALL_INDEX", 'git@github.com:ipa-rwu/scalable_system_setup.git'))


DEB_JOBS = list()
SOURCE_JOBS = list()
PR_JOBS = list()
DOC_JOBS = list()
SYS_JOBS = list()
nightlyDebNames = list()
nightlyDocNames = list()

for dist in dist_names:
    print('')
    print('Configuring for %s' % dist)

    # debian builder
    DEB_JOBS += debbuilders_from_rosdistro(c, oracle, dist, BUILDERS, locks)

    # test jobs, triggered by source commit
    source_job, pr_job = testbuilders_from_rosdistro(c, oracle, dist, BUILDERS, locks)
    SOURCE_JOBS += source_job
    PR_JOBS += pr_job
    # doc jobs
    DOC_JOBS += docbuilders_from_rosdistro(c, oracle, dist, BUILDERS)

    # system jobs
    SYS_JOBS = sysbuilders_from_rosinatll(c, systemindex, dist, BUILDERS, locks)

# Build debs at 2AM

    # get name of first of nightly debuilds for this distro
    build_files = get_release_build_files(oracle.getIndex(), dist)
    for build_file in build_files:
        for os in build_file.get_target_os_names():
            for code_name in build_file.get_target_os_code_names(os):
                for arch in build_file.get_target_arches(os, code_name):
                    try:
                        nightlyDebNames.append(oracle.getNightlyDebStart(dist)+'_'+dist+'_'+code_name+'_'+arch+'_debbuild')
                    except IndexError:
                       # No release jobs?
                       print('No release jobs will be run')

# Build docs at 2AM

    # get name of first nightly docbuilds for this distro
    try:
        nightlyDocNames.append(oracle.getNightlyDocStart(dist)+'_'+dist+'_docbuild')
    except IndexError:
        # No documentation jobs?
        print('No documentation jobs will be run')
    print('')



# Build debs at 2AM

c['schedulers'].append(
    timed.Nightly(
        name = 'nightly-debbuild',
        branch = 'master',
        builderNames = nightlyDebNames,
        hour=2,
        minute=0
    )
)

# Build docs at 5AM
if nightlyDocNames:
    c['schedulers'].append(
        timed.Nightly(
            name = 'nightly-docbuild',
            branch = 'master',
            builderNames = nightlyDocNames,
            hour=5,
            minute=0
        )
    )

c['schedulers'].append(
    forcesched.ForceScheduler(
        name='force',
        builderNames=DEB_JOBS+PR_JOBS+DOC_JOBS+SYS_JOBS
    )
)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "ScalABLE40"
c['titleURL'] = "https://github.com/ScalABLE40"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

#c['buildbotURL'] = "http://localhost:8010/"
c['buildbotURL'] = buildbotURL

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))
#c['www'] = dict(port=int(www_port),
#                   plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

####### DB URL
c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    #'db_url' : "sqlite:///state.sqlite",
    'db_url' : db_url,
}


